{"ast":null,"code":"import styled from \"styled-components\";\nimport { colors, buttonAndLinkHover } from \"../_variables\";\n\nvar getButtonStyles = function getButtonStyles(type) {\n  switch (type) {\n    case \"primary\":\n      return {\n        backgroundColor: colors.red,\n        boxShadow: \"0px 2px 10px 0px rgba(0,0,0,0.2)\",\n        color: \"#FFFFFF\"\n      };\n\n    case \"secondary\":\n      return {\n        backgroundColor: \"#FFFFFF\",\n        color: colors.blue,\n        boxShadow: \"0px 2px 10px 0px rgba(0,0,0,0.2)\"\n      };\n\n    case \"centered\":\n      return {\n        backgroundColor: colors.lightblue,\n        color: colors.blue\n      };\n\n    case \"link-btn\":\n      return {\n        color: \"#FFFFFF\",\n        backgroundColor: colors.blue\n      };\n\n    case \"link-btn-inverted\":\n      return {\n        color: colors.blue,\n        border: \"1px solid \".concat(colors.blue),\n        backgroundColor: \"#FFFFFF\"\n      };\n\n    default:\n      break;\n  }\n}; // const ButtonLink = ({ label, ...props }) => {\n//   return <StyledButtonLink {...props}>{props.children}</StyledButtonLink>;\n// };\n\n\nvar ButtonLink = styled.a.withConfig({\n  displayName: \"ButtonLink\",\n  componentId: \"sc-8cci6a-0\"\n})([\"text-transform:uppercase;font-family:Work Sans;font-weight 400;border-radius:25px;position:relative;display:flex;justify-content:center flex-direction:row;align-items:center;justify-items:center;font-size:14px;text-transform:uppercase;letter-spacing:1px;padding-top:13px;padding-bottom:12px;padding-right:\", \";padding-left:\", \";outline:none;border:none;transition:all 400ms ease;&:hover{\", \"}\", \" a{font-size:14px;color:white;text-decoration:none;}img{margin-right:4px;margin-left:4px;}\", \" \", \";\", \"\"], function (props) {\n  return props.type.includes(\"transparent\") ? \"0px\" : \"20px\";\n}, function (props) {\n  return props.type.includes(\"transparent\") ? \"0px\" : \"20px\";\n}, buttonAndLinkHover, function (props) {\n  return props.isDisabled && \"background: \".concat(colors.gray, \"; color: \").concat(colors.black, \"; border: none; box-shadow: none;\\n  &:hover{\\n    cursor: default;\\n    transform: translateY(0px)\\n  }\\n  \");\n}, function (props) {\n  return props.type ? getButtonStyles(props.type) : getButtonStyles(\"primary\");\n}, function (props) {\n  return props.mobileHide ? \"display: none\" : \"display: flex\";\n}, function (props) {\n  return props.style ? props.style : null;\n});\nexport { ButtonLink };","map":null,"metadata":{},"sourceType":"module"}
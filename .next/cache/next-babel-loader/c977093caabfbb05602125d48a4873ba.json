{"ast":null,"code":"import _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport DeepDiff from 'deep-diff';\nimport classNames from 'classnames';\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"validateAllFields\", (schema, fields) => {\n      try {\n        schema.validateSync(fields, {\n          abortEarly: false\n        });\n        return null;\n      } catch (err) {\n        const errors = err.inner.reduce((acc, currentError) => {\n          if (acc[currentError.params.path]) {\n            acc[currentError.params.path].push(currentError.message);\n            return acc;\n          } else {\n            acc[currentError.params.path] = [currentError.message];\n            return acc;\n          }\n        }, {});\n        return _Object$keys(errors).length > 0 ? errors : null;\n      }\n    });\n\n    _defineProperty(this, \"validatePrevFields\", (schema, fields) => {\n      try {\n        schema.validateSync(fields, {\n          abortEarly: false\n        });\n        return null;\n      } catch (err) {\n        const errors = err.inner.reduce((acc, currentError) => {\n          if (!this.state.prevErrors[currentError.params.path]) {\n            return acc;\n          }\n\n          if (acc[currentError.params.path]) {\n            acc[currentError.params.path].push(currentError.message);\n            return acc;\n          } else {\n            acc[currentError.params.path] = [currentError.message];\n            return acc;\n          }\n        }, {});\n        return _Object$keys(errors).length > 0 ? errors : null;\n      }\n    });\n\n    _defineProperty(this, \"submitFormWithValidation\", () => {\n      const errors = this.validateAllFields(this.props.validationSchema, this.props.fields);\n\n      if (!errors) {\n        return this.props.submitForm();\n      }\n\n      this.setState({\n        errors,\n        prevErrors: errors\n      });\n    });\n\n    this.state = {\n      errors: null,\n      prevErrors: {}\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const errors = this.validatePrevFields(this.props.validationSchema, this.props.fields);\n    const errDiff = DeepDiff(errors, this.state.errors);\n\n    if (errDiff) {\n      this.setState({\n        errors\n      });\n    }\n  }\n\n  render() {\n    const {\n      className\n    } = this.props;\n    return __jsx(\"div\", {\n      className: classNames('form', className && className)\n    }, this.props.children({\n      errors: this.state.errors,\n      submitFormWithValidation: this.submitFormWithValidation\n    }));\n  }\n\n}\n\nexport default Form;","map":null,"metadata":{},"sourceType":"module"}
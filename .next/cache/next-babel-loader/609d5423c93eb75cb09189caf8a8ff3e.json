{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport { Waypoint } from \"react-waypoint\";\nimport { StyledNavWrapper } from \"./styles\";\nimport { withRouter } from \"next/router\";\nimport DesktopNav from \"./desktop-nav\";\nimport MobileNav from \"./mobile-nav\";\n\nconst Header = (_ref) => {\n  let {\n    menuOpen,\n    handleMenuToggle,\n    navLight,\n    router,\n    user\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"menuOpen\", \"handleMenuToggle\", \"navLight\", \"router\", \"user\"]);\n\n  const {\n    0: stickyNav,\n    1: setStickyNav\n  } = useState(false);\n\n  const getPosition = ({\n    currentPosition,\n    previousPosition\n  }) => {\n    if (previousPosition === \"above\") {\n      return setStickyNav(false);\n    }\n\n    if (previousPosition === \"inside\" || currentPosition === \"above\") {\n      return setStickyNav(true);\n    }\n\n    return;\n  };\n\n  return __jsx(Waypoint, {\n    onPositionChange: getPosition\n  }, __jsx(\"div\", {\n    style: {\n      position: \"relative\",\n      zIndex: 5\n    }\n  }, __jsx(StyledNavWrapper, {\n    menuOpen: menuOpen,\n    stickyNav: stickyNav || navLight\n  }, __jsx(DesktopNav, {\n    stickyNav: stickyNav,\n    navLight: navLight,\n    router: router\n  }), __jsx(MobileNav, {\n    menuOpen: menuOpen,\n    handleMenuToggle: handleMenuToggle,\n    stickyNav: stickyNav,\n    navLight: navLight,\n    router: router\n  }))));\n};\n\nexport default withRouter(Header);","map":null,"metadata":{},"sourceType":"module"}
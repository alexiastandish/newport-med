{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport React from \"react\";\nimport set from \"lodash/set\";\nimport has from \"lodash/has\";\n\nvar enhancedReducer = function enhancedReducer(state, updateArg) {\n  // check if the type of update argument is a callback function\n  if (updateArg.constructor === Function) {\n    return _objectSpread({}, state, updateArg(state));\n  } // if the type of update argument is an object\n\n\n  if (updateArg.constructor === Object) {\n    // does the update object have _path and _value as it's keys\n    // if yes then use them to update deep object values\n    if (has(updateArg, \"_path\") && has(updateArg, \"_value\")) {\n      var _path = updateArg._path,\n          _value = updateArg._value;\n      return produce(state, function (draft) {\n        set(draft, _path, _value);\n      });\n    } else {\n      return _objectSpread({}, state, updateArg);\n    }\n  }\n};\n\nvar useFormState = function useFormState(initialState) {\n  var _React$useReducer = React.useReducer(enhancedReducer, initialState),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      state = _React$useReducer2[0],\n      updateState = _React$useReducer2[1];\n\n  var updateForm = React.useCallback(function (_ref) {\n    var _ref$target = _ref.target,\n        value = _ref$target.value,\n        name = _ref$target.name,\n        type = _ref$target.type;\n    var updatePath = name.split(\".\"); // if the input is a checkbox then use callback function to update\n    // the toggle state based on previous state\n\n    if (type === \"checkbox\") {\n      updateState(function (prevState) {\n        return _defineProperty({}, name, !prevState[name]);\n      });\n      return;\n    } // if we have to update the root level nodes in the form\n\n\n    if (updatePath.length === 1) {\n      var _updatePath = _slicedToArray(updatePath, 1),\n          key = _updatePath[0];\n\n      updateState(_defineProperty({}, key, value));\n    } // if we have to update nested nodes in the form object\n    // use _path and _value to update them.\n\n\n    if (updatePath.length === 2) {\n      updateState({\n        _path: updatePath,\n        _value: value\n      });\n    }\n  }, []);\n  return [state, updateForm];\n};\n\nexport default useFormState;","map":null,"metadata":{},"sourceType":"module"}